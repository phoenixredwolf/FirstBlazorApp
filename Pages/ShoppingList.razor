@page "/shoppinglist"
@layout ShoppingListLayout;
@using FirstBlazorApp.Data;
@using Microsoft.JSInterop;
@implements IAsyncDisposable;

<PageTitle>@title</PageTitle>

<h3>ShoppingList</h3>
<EditForm Model="@grocery" OnSubmit="AddGrocery">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Quantity:
            <InputNumber @bind-Value="grocery.Quantity" />
        </label>
    </p>
    <p>
        <label>
            Name:
            <InputText @bind-Value="grocery.Name" />
        </label>
    </p>
    <p>
        <label>
            Unit Price:
            <InputNumber @bind-Value="grocery.BasePrice" />
        </label>
    </p>
    <button type="submit">Add Grocery</button>
</EditForm>

<table class="table table-sm">
    <thead>
        <tr>
            <th>Quantity</th>
            <th>Name</th>
            <th>Base Price</th>
            <th>Total Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var grocery in groceries)
        {
            <Item GroceryItem="@grocery" OnGroceryPriceIncreased="OnGroceryPriceIncreased"/>
        }
    </tbody>
</table>
<h1>Total (@sum.ToString("C"))</h1>

@if (location is not null)
{
    <div>
        Lat: @location.Latitude <br/>
        Lon: @location.Longitude
    </div>    
}

<p><button @onclick=@GetLocationAsync>Get Location Data</button></p>


@code {
    private readonly Lazy<Task<IJSObjectReference>> moduleTask = default!;
    private readonly DotNetObjectReference<ShoppingList> dotNetObjectReference;
    private GeoCoordinates? location = null;

    [Inject]
    private IJSRuntime jsRuntime { get; set; } = default!;

    public ShoppingList()
    {
        moduleTask = new(() => jsRuntime!.InvokeAsync<IJSObjectReference>(
            identifier: "import",
            args: "./scripts/geoLocationJsInterop.js")
        .AsTask());

        dotNetObjectReference = DotNetObjectReference.Create(this);
    }

    public async Task GetLocationAsync()
    {
        var module = await moduleTask.Value;
        await module.InvokeVoidAsync(identifier: "getCurrentPosition", dotNetObjectReference);
    }

    [JSInvokable]
    public async Task OnSuccessAsync(GeoCoordinates geoCoordinates)
    {
        this.location = geoCoordinates;
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (moduleTask.IsValueCreated)
        {
            var module = await moduleTask.Value;
            await module.DisposeAsync();
        }
    }

    public class GeoCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Accuracy { get; set; }
    }

    private float sum = 0;
    private string title = "Our Groceries";
    private Grocery grocery = new();

    private List<Grocery> groceries = new();

    private void AddGrocery()
    {
        
        CalulateTotalPrice();
        groceries.Add(grocery);
        grocery = new();     

        UpdateTotalAmount();
    }

    private void CalulateTotalPrice()
    {
        grocery.TotalPrice = grocery.BasePrice * grocery.Quantity;
    }

    public void UpdateTotalAmount()
    {
        sum = groceries.Sum(x => x.TotalPrice);
    }

    public void OnGroceryPriceIncreased()
    {
        UpdateTotalAmount();
    }
}
