@page "/fetchdata"
@inject HttpClient Http


<PageTitle>Weather forecast</PageTitle>

<div>
    <p class="fs-1" style="text-align:center">Weather forecast</p>

    <p class="fs-3">City: @cityName</p>
    <p class="fs-6">
        Sunrise: @sunrise<br />
        Sunset: @sunset
    </p>

</div>
<div>
    <p class="fs-4">Enter zipcode</p>
    <input id="zipInput" type="number" @bind="@zipCode" maxlength="5" minlength="5"/>
    <button id="zipBtn" class="btn btn-primary" @onclick="GetWeather" enabled="btnEnabled">Search</button>
</div>
<table class="table table-hover table-fixed">
    <thead class="thead-light">
        <tr>
            <th scope="col" style="width:6em">Date</th>
            <th scope="col" class="text-center" style="width:6em">Time</th>
            <th scope="col" class="text-center" style="width:8em">Tempature</th>
            <th scope="col" class="text-center" style="width:8em">Feels Like</th>
            <th scope="col" class="text-center" style="width:8em">Humidity</th>
            <th scope="col" class="text-center" style="width:8em">Wind</th>
            <th scope="col" class="text-center" style="width:8em">Wind Gust</th>
            <th scope="col" >Description</th>
        </tr>
    </thead>
    <tbody class="">

        @if (isLoaded)
        {
            @if (weatherForcasts != null)
            {
                @for (int x =0; x < forecasts?.Length; x++)
                {
                    if (x==0 || DtFromUnix(forecasts[x].dt).ToShortDateString() != date)
                    {
                        date = DtFromUnix(forecasts[x].dt).ToShortDateString();
                        <tr style="border-top:double">
                            <th scope="row">@date</th>
                            <td class="text-end">@DtFromUnix(forecasts[x].dt).ToShortTimeString()</td>
                            <td class="text-center">@Math.Round(Convert.ToDouble(forecasts[x].main?.temp))</td>
                            <td class="text-center">@Math.Round(Convert.ToDouble(forecasts[x]?.main?.feels_like))</td>
                            <td class="text-center">@forecasts[x]?.main?.humidity %</td>
                            <td class="text-center">@GetWindDirection(Convert.ToInt16(forecasts[x]?.wind?.deg)) @@ @Math.Round(Convert.ToDouble(forecasts[x]?.wind?.speed)) mph</td>
                            <td class="text-center">@Math.Round(Convert.ToDouble(forecasts[x]?.wind?.gust)) mph</td>
                            <td class="text-capitalize">@forecasts[x]?.weather?[0].description</td>
                        </tr>
                    } 
                    else
                    {            
                        <tr>
                            <th></th>
                            <td class="text-end">@DtFromUnix(forecasts[x].dt).ToShortTimeString()</td>
                            <td class="text-center">@Math.Round(Convert.ToDouble(forecasts[x].main?.temp))</td>
                            <td class="text-center">@Math.Round(Convert.ToDouble(forecasts[x]?.main?.feels_like))</td>
                            <td class="text-center">@forecasts[x]?.main?.humidity %</td>
                            <td class="text-center">@GetWindDirection(Convert.ToInt16(forecasts[x]?.wind?.deg)) @@ @Math.Round(Convert.ToDouble(forecasts[x]?.wind?.speed)) mph</td>
                            <td class="text-center">@Math.Round(Convert.ToDouble(forecasts[x]?.wind?.gust)) mph</td>
                            <td class="text-capitalize">@forecasts[x]?.weather?[0].description</td>
                        </tr>
                    }
                }
            }            
        }
        else
        {
            <tr><td colspan="8" class="text-center fs-3"><em>Loading...</em></td></tr>

        }
    </tbody>
</table>

@code {
    private WeatherForcast? weatherForcasts;
    private Forcast[]? forecasts;
    private string? date;
    private bool isLoaded = false;
    private City? city;
    private string? cityName;
    private string? sunrise;
    private string? sunset;
    private string zipCode = "08096";

    protected override async Task OnInitializedAsync()
    {
        await GetWeather();
    }

    private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

    public static DateTime DtFromUnix(long ms)
    {
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);        
        return dateTime.AddSeconds(ms).ToLocalTime();
    }

    private async Task GetWeather()
    {
        var result = await Http.GetAsync(
          "?zip=" + zipCode + ",us&units=imperial&appid=b5c3b022560ac4d3a8544fbaf2083e74"
            );
        if (result.IsSuccessStatusCode)
        {
            weatherForcasts = await result.Content.ReadFromJsonAsync<WeatherForcast>();
            if(weatherForcasts is not null)
            {
                forecasts = weatherForcasts.list;
                if(weatherForcasts.city is not null)
                {
                    city = weatherForcasts.city;
                    cityName = city.name;
                }
            }
            if(forecasts is not null)
            {
                sunrise = DtFromUnix(Convert.ToInt64(city?.sunrise)).ToShortTimeString();
                sunset = DtFromUnix(Convert.ToInt64(city?.sunset)).ToShortTimeString();
                date = DtFromUnix(forecasts[0].dt).ToShortDateString();
            }
            isLoaded = true;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            weatherForcasts = null;
            cityName = "City Not Found! Please Try Again";
            sunrise = null;
            sunset = null;
            isLoaded = true;
            await InvokeAsync(StateHasChanged);
        }

    }

    private string GetWindDirection(int degrees)
    {
        string result;
        switch(degrees)
        {
            case <23 or >337:
                result = "N";
                break;
            case >22 and <68:
                result = "NE";
                break;
            case >67 and <113:
                result = "E";
                break;
            case >112 and <158:
                result = "SE";
                break;
            case >157 and <203:
                result = "S";
                break;
            case >202 and <248:
                result = "SW";
                break;
            case >247 and <293:
                result = "W";
                break;
            case >292 and <338:
                result = "NW";
                break;
        }
        return result;
    }

    public partial class WeatherForcast
    {
        public string? cod { get; set; }
        public int? message { get; set; }
        public int? cnt { get; set; }
        public Forcast[]? list { get; set; }
        public City? city { get; set; }
    }

    public partial class Forcast
    {
        public long dt { get; set; }
        public Main? main { get; set; }
        public Weather[]? weather { get; set; }
        public Clouds? clouds { get; set; }
        public Wind? wind { get; set; }
        public int? visibility { get; set; }
        public double? pop { get; set; }
        public Sys? sys { get; set; }
        public string? dt_txt { get; set; }
    }

    public class Main
    {
        public float? temp { get; set; }
        public float? feels_like { get; set; }
        public float? temp_min { get; set; }
        public float? temp_max { get; set; }
        public int? pressure { get; set; }
        public int? sea_level { get; set; }
        public int? grnd_level { get; set; }
        public int? humidity { get; set; }
        public float? temp_kf { get; set; }
    }

    public class Wind
    {
        public float? speed { get; set; }
        public int? deg { get; set; }
        public float? gust { get; set; }
    }

    public class Weather
    {
        public int? id { get; set; }
        public string? main { get; set; }
        public string? description { get; set; }
        public string? icon { get; set; }
    }

    public class Clouds
    {
        public int? all { get; set; }
    }

    public class Sys
    {
        public string? pod { get; set; }
    }

    public partial class City
    {
        public int? id { get; set; }
        public string? name { get; set; }
        public Coord? coord { get; set; }
        public string? country { get; set; }
        public long? population { get; set; }
        public int? timezone { get; set; }
        public long? sunrise { get; set; }
        public long? sunset { get; set; }
    }

    public class Coord
    {
        public float? lat { get; set; }
        public float? lon { get; set; }

    }
}
